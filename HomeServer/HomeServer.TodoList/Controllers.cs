//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace HomeServer.TodoList
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <remarks>
        /// Gets the IDs of all tasks.
        /// </remarks>

        /// <returns>Retrieves a collection of task Ids.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<TaskInfoDto>>> GetTasksAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <remarks>
        /// Posts a task that needs to be completed.
        /// </remarks>

        /// <returns>Created task.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> PostTaskAsync(PostTaskInfoDto? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <remarks>
        /// Gets a todo item by its ID.
        /// </remarks>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TaskInfoDto>> GetTaskByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <remarks>
        /// Alters the data held within a task.
        /// </remarks>



        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TaskInfoDto>> PutTaskByIdAsync(int id, PutTaskInfoDto? body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <remarks>
        /// Deletes the task with the given id.
        /// </remarks>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteTaskByIdAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Gets the IDs of all tasks.
        /// </remarks>
        /// <returns>Retrieves a collection of task Ids.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("todo")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<TaskInfoDto>>> GetTasks(System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetTasksAsync(cancellationToken);
        }

        /// <remarks>
        /// Posts a task that needs to be completed.
        /// </remarks>
        /// <returns>Created task.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("todo")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<int>> PostTask([Microsoft.AspNetCore.Mvc.FromBody] PostTaskInfoDto? body, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PostTaskAsync(body, cancellationToken);
        }

        /// <remarks>
        /// Gets a todo item by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("todo/id/{id}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TaskInfoDto>> GetTaskById(int id, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetTaskByIdAsync(id, cancellationToken);
        }

        /// <remarks>
        /// Alters the data held within a task.
        /// </remarks>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("todo/id/{id}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<TaskInfoDto>> PutTaskById(int id, [Microsoft.AspNetCore.Mvc.FromBody] PutTaskInfoDto? body, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PutTaskByIdAsync(id, body, cancellationToken);
        }

        /// <remarks>
        /// Deletes the task with the given id.
        /// </remarks>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("todo/id/{id}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteTaskById(int id, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.DeleteTaskByIdAsync(id, cancellationToken);
        }

    }

    /// <summary>
    /// Error response to a given request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDto
    {
        /// <summary>
        /// The error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public System.Collections.Generic.List<string>? Message { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskInfoDto
    {
        /// <summary>
        /// The id of this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The name of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// A description of the task that needs to be completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The due date of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public string? DueDate { get; set; } = default!;

        /// <summary>
        /// The estimated time in hours to complete this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedTime")]
        public float? EstimatedTime { get; set; } = default!;

        /// <summary>
        /// Whether or not this task is complete.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isComplete")]
        public bool? IsComplete { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTaskInfoDto
    {
        /// <summary>
        /// The name of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// A description of the task that needs to be completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The due date of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public string? DueDate { get; set; } = default!;

        /// <summary>
        /// The estimated time in hours to complete this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedTime")]
        public float? EstimatedTime { get; set; } = default!;

        /// <summary>
        /// Whether or not this task is complete.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isComplete")]
        public bool? IsComplete { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutTaskInfoDto
    {
        /// <summary>
        /// The name of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// A description of the task that needs to be completed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The due date of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        public string? DueDate { get; set; } = default!;

        /// <summary>
        /// The estimated time in hours to complete this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimatedTime")]
        public float? EstimatedTime { get; set; } = default!;

        /// <summary>
        /// Whether or not this task is complete.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isComplete")]
        public bool? IsComplete { get; set; } = default!;

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625